name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.10, 3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        python -m pytest tests.py -v --tb=short
      env:
        # Mock environment variables for testing
        TELEGRAM_TOKEN: "mock_token_for_testing"
        OPENAI_API_KEY: "mock_openai_key_for_testing"
        GOOGLE_API_KEY: "mock_google_key_for_testing"
    
    - name: Test imports
      run: |
        python -c "import main; print('main.py imports OK')"
        python -c "import agent; print('agent.py imports OK')"
        python -c "import tools; print('tools.py imports OK')"
        python -c "import memory; print('memory.py imports OK')"
        python -c "import vector_db; print('vector_db.py imports OK')"
    
    - name: Check for secrets
      run: |
        # Check for common secret patterns
        if grep -r "sk-" . --exclude-dir=.git --exclude="*.md"; then
          echo "❌ Potential OpenAI API key found!"
          exit 1
        fi
        if grep -r "AIza" . --exclude-dir=.git --exclude="*.md"; then
          echo "❌ Potential Google API key found!"
          exit 1
        fi
        if grep -r "[0-9]\{10\}:[A-Za-z0-9_-]\{35\}" . --exclude-dir=.git --exclude="*.md"; then
          echo "❌ Potential Telegram bot token found!"
          exit 1
        fi
        echo "✅ No secrets found in code"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t telegram-agent:test .
    
    - name: Test Docker image
      run: |
        # Test that the image builds and starts
        docker run --rm -d --name test-container telegram-agent:test
        sleep 10
        docker logs test-container
        docker stop test-container
    
    - name: Test Docker Compose
      run: |
        # Test docker-compose configuration
        docker-compose config
        echo "✅ Docker Compose configuration is valid"

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check README
      run: |
        if [ ! -f "README.md" ]; then
          echo "❌ README.md not found!"
          exit 1
        fi
        echo "✅ README.md exists"
    
    - name: Check documentation files
      run: |
        if [ ! -f "reports/report.md" ]; then
          echo "❌ reports/report.md not found!"
          exit 1
        fi
        if [ ! -f "conversations/README.md" ]; then
          echo "❌ conversations/README.md not found!"
          exit 1
        fi
        echo "✅ All documentation files exist"
    
    - name: Validate Markdown
      run: |
        pip install markdown
        python -c "
        import markdown
        with open('README.md', 'r', encoding='utf-8') as f:
            content = f.read()
        html = markdown.markdown(content)
        print('✅ README.md is valid Markdown')
        "
